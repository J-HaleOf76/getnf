#!/bin/bash

# shellcheck disable=SC2164

nerdfontsrepo='https://api.github.com/repos/ryanoasis/nerd-fonts'
dist_dir="$HOME/.local/share/fonts"
down_dir="$(command -v xdg-user-dir > /dev/null && xdg-user-dir DOWNLOAD || echo "$HOME/Downloads")/NerdFonts"
cache_dir="${XDG_CACHE_HOME:-$HOME/.cache}/nerdFonts"

release_file="$cache_dir/release.txt"
installed_fonts_file="$cache_dir/installed.txt"

aFontInstalled="False"
keepFontArchives="False"
update_fonts="False"
force_update="False"

if command -v tput > /dev/null; then
    # tput is part of the ncurses package
    RED=$(tput setaf 1)
    GREEN=$(tput setaf 2)
    RESET=$(tput sgr0)
fi

# Mac OS
if [[ "$(uname)" == "Darwin" ]]; then
    dist_dir="$HOME/Library/Fonts"
    cache_dir="$HOME/Library/Caches/NerdFonts"
fi

show_help() {
    cat << EOF
getNF: A Better way to install NerdFonts

Usage:
  getnf [options]

OPTIONS:
  -h          print this help message and exit
  -f          force reinstall an already installed font
  -k          keep the downloaded font archives
  -i <font>   directly install the specified fonts

To install fonts using the menu:
- Choose one or more fonts (by index/number) to install
- Hit Return/Enter to install the selected fonts
- Type 'q' to quit

To install fonts directly:
- Get the exact name of a font from the menu
- Use 'getnf -i "<font-name>"' to install a font
- Use 'getnf -i "<name1>,<name2>"' to install multiple fonts
EOF
}

info() {
    printf "%s\n" "$1"
}

confirm() {
    printf "${GREEN}%b${RESET}\n" "$1"
}

alert() {
    printf "${RED}%b${RESET}\n" "$1"
}

error() {
    alert "$1" >&2
    exit 1
}

ensure_installed() {
    if ! command -v "$1" > /dev/null; then
        error "Dependency $1 is not installed on your system."
    fi
}

create_dir() {
    if [[ -d "$1" ]]; then
        info "$2 directory exists, good."
    else
        mkdir -p "$1"
        confirm "Created the $2 directory."
    fi
}

check_dependencies() {
    ensure_installed curl

    create_dir "$dist_dir" "Fonts"
    create_dir "$down_dir" "Fonts Download"
    [[ -d "$cache_dir" ]] || mkdir -p "$cache_dir"
}

handle_release_version() {
    # Get the local release version
    [[ -f "$release_file" ]] && cached_release=$(cat "$release_file")
    # Get the latest release number from NerdFonts github repo
    release=$(curl --silent "$nerdfontsrepo/releases/latest" |
        awk -v RS=',' -F'"' '/tag_name/ {print $4}')
    # Compare the latest release number with the cached release number
    if [[ "$release" != "$cached_release" ]]; then
        update_fonts=True
        # Update the cached release number
        echo "$release" > "$release_file"
    fi
}

download_font() {
    info "$1 download started..."
    curl -LJO# "https://github.com/ryanoasis/nerd-fonts/releases/download/$release/$1.tar.xz"
    confirm "$1 download finished"
}

extract_font() {
    info "$1 installation started..."
    mkdir -p "$dist_dir/$1"
    tar -xf "$1.tar.xz" -C "$dist_dir/$1"
    confirm "$1 installation finished"
}

remove_font_archives() {
    info "Removing downloaded font archives from $down_dir..."
    for font in "${SELECTED_FONTS[@]}"; do
        rm "$down_dir/$font.tar.xz"
    done
    confirm "Downloaded font archives removal succeeded!"
}

update_font_cache() {
    info "Updating fc-cache..."
    fc-cache -f 2>&1
    confirm "fc-cache: update succeeded!"
}

install_font() {
    pushd "$down_dir" > /dev/null
    # Remove the archive if it exists due to curl not having overwrite option
    rm -f "$down_dir/$1.tar.xz"
    download_font "$1" &&
        extract_font "$1" &&
        echo "$1" >> "$installed_fonts_file"
    aFontInstalled="True"
    popd > /dev/null
}

font_url_exists() {
    url="https://github.com/ryanoasis/nerd-fonts/releases/download/$release/$1.tar.xz"
    curl --output /dev/null --silent --head --fail "$url" && return 0 || return 1
}

direct_install() {
    for font_name in $(echo "$1" | tr ',' ' '); do
        if font_url_exists "$font_name"; then
            SELECTED_FONTS+=("$font_name")
        else
            error "Invalid font name: $font_name. Try again."
        fi
    done
}

post_install() {
    update_font_cache
    if [[ "$keepFontArchives" == "False" ]]; then
        remove_font_archives
    else
        info "The downloaded font archives can be found in $down_dir"
    fi
    confirm "Enjoy your new fonts!"
}

menu() {
    local options=("$@")
    info "Select one or more fonts:"
    (
        for i in "${!options[@]}"; do
            printf "%d) %s\n" "$((i + 1))" "${options[$i]}"
        done
        printf "q) Quit\n"
    ) | pr -3 -t -w "$(tput cols)"
}

# Parse input like 1-3
parse_range() {
    if ! [[ $1 =~ ^[0-9]+-[0-9]+$ ]]; then
        alert "Invalid input format: $1. Expected format: X-Y."
        return 1
    fi
    IFS='-' read -ra range <<< "$1"
    range_start=${range[0]}
    range_end=${range[1]}
    for ((i = range_start; i <= range_end; i++)); do
        index=$((i - 1))
        if ((index >= 0 && index < ${#font_options[@]})); then
            SELECTED_FONTS[index]=${font_options[index]}
        else
            alert "Invalid option: $i. Try again."
            return 1
        fi
    done
}

menu_install() {
    # Download the file list and extract the font names
    font_list=$(curl -s "$nerdfontsrepo/contents/patched-fonts?ref=master" |
        awk -v RS=',' -F'"' '/name/ {print $4}')
    # Convert the list of fonts into an array of fonts
    declare -a all_fonts
    # Read the input string and populate the array
    #mapfile -t all_fonts <<< "$font_list"
    while IFS= read -r line; do
        all_fonts+=("$line")
    done <<< "$font_list"

    # Get the list of installed fonts
    if [[ -f "$installed_fonts_file" ]]; then
        installed_font_list=$(cat "$installed_fonts_file")
        # Convert the list of installed fonts into an array of fonts
        declare -a installed_fonts
        while IFS= read -r line; do
            installed_fonts+=("$line")
        done <<< "$installed_font_list"
    fi

    # Remove installed fonts from the list of all fonts if there is no new release
    # or if the user does not want to force the update
    if [[ "$update_fonts" == "False" && "$force_update" == "False" ]]; then
        declare -a font_options
        for font in "${all_fonts[@]}"; do
            if [[ " ${installed_fonts[*]} " != *" $font "* ]]; then
                font_options+=("$font")
            fi
        done
    else
        echo "" > "$installed_fonts_file"
        font_options=("${all_fonts[@]}")
    fi

    # Call the menu function to list the available fonts
    menu "${font_options[@]}"

    # Handle user input
    while true; do
        read -rp "Enter font number(s) (e.g. 1,2,3 or 1-3 or 1,3-5): " choices
        for choice in $(echo "$choices" | tr ',' ' '); do
            if [[ $choice == "q" ]]; then
                confirm "Goodbye!"
                exit
            # Choice is a range (e.g. 1-3)
            elif [[ $choice == *-* ]]; then
                parse_range "$choice" || continue 2
            elif ((choice >= 1 && choice <= ${#font_options[@]})); then
                index=$((choice - 1))
                SELECTED_FONTS[index]=${font_options[index]}
            else
                alert "Invalid option: $choice. Try again."
                continue 2
            fi
        done
        echo "Selected fonts: ${SELECTED_FONTS[*]}"
        break
    done
}

main() {
    while getopts ":hkfi:" option; do
        case "${option}" in
            h) show_help && exit 0 ;;
            k) keepFontArchives="True" ;;
            f) force_update="True" ;;
            i) FONTNAMES="$OPTARG" ;;
            :) error "Option '-$OPTARG' requires at least one font name." ;;
            *) show_help && exit 0 ;;
        esac
    done
    shift $((OPTIND - 1))

    check_dependencies
    handle_release_version

    declare -a SELECTED_FONTS
    if [[ -n "$FONTNAMES" ]]; then
        direct_install "$FONTNAMES"
    else
        menu_install
    fi

    if ((${#SELECTED_FONTS[@]} > 0)); then
        for i in "${SELECTED_FONTS[@]}"; do
            install_font "$i"
        done
    else
        error "No fonts were selected, exiting."
    fi

    if [[ "$aFontInstalled" == "True" ]]; then
        post_install
    fi
}

main "$@"
